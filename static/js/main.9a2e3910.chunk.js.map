{"version":3,"sources":["components/List.jsx","components/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["List","_ref","list","setList","setListChange","dragItem","dropItem","react_default","a","createElement","className","undefined","map","_ref2","i","id","name","key","concat","draggable","onDragStart","e","currentTarget","querySelector","style","opacity","dataTransfer","effectAllowed","setData","innerText","handleDragStart","onDragOver","preventDefault","dropEffect","handleDragOver","onDrop","stopPropagation","getData","listTags","Array","from","document","querySelectorAll","newListNumbers","item","forEach","tag","innerHTML","pos","handleDrop","onDragEnd","target","handleDragEnd","onChange","handleChange","onClick","normPosition","filter","deletePoint","Details","info","setInfo","center","_useState","useState","_useState2","Object","slicedToArray","data","useEffect","onSubmit","event","nanoid","coords","length","value","type","onChangeInput","placeholder","App","_useState3","_useState4","_useState5","_useState6","isListChange","_useState7","_useState8","ballonContent","setBallonContent","_useState9","_useState10","hintContent","setHintContent","_useState11","_useState12","setCenter","console","log","newList","toConsumableArray","mapData","zoom","placeMark","properties","balloonContent","options","preset","line","geometry","coordinates","sort","b","strokeColor","strokeWidth","newHintContent","content","react_yandex_maps_esm","modules","onBoundsChange","newCenter","get","getCenterMap","defaultState","assign","onMouseEnter","currentCoord","newCoords","getCoordinates","set","changeCoords","BalloonClose","unset","baloonUnset","BalloonOpen","baloonSet","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a2e3910.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function List({list, setList, setListChange}) {\n\n    let dragItem = null;\n    let dropItem = null;\n\n    function handleDragStart(e) {\n        dragItem = e.currentTarget.querySelector('span');\n        e.currentTarget.style.opacity = '0.4';  \n      \n        e.dataTransfer.effectAllowed = 'move';\n        e.dataTransfer.setData('text/html', dragItem.innerText);\n        // return dragItem;\n    }\n    \n    function handleDragOver(e) {\n        e.preventDefault(); \n        e.dataTransfer.dropEffect = 'move';  \n        return false;\n    }\n    \n    function handleDrop(e) {\n        e.stopPropagation(); \n      \n        dropItem = e.currentTarget.querySelector('span');\n        dragItem.innerText = dropItem.innerText;\n        dropItem.innerText = e.dataTransfer.getData('text/html');\n        \n        const listTags = Array.from(document.querySelectorAll('.dragItem'));\n          const newListNumbers = list.map(item => {\n            listTags.forEach((tag, i) => {\n                if (tag.querySelector('span').innerHTML === item.name) {\n                    item.pos = i;\n                }\n            })\n            return item;\n        })\n        \n        setList(newListNumbers);\n        setListChange(\"yes\");\n        dropItem.innerText = dragItem.innerText;\n        dragItem.innerText = e.dataTransfer.getData('text/html');\n    }\n\n    function handleDragEnd(e) {\n        e.target.style.opacity = '1';\n    }\n\n    function handleChange(e, i) {\n        e.target.style.opacity = '1';\n    } \n\n    function deletePoint(i) {\n        const withoutDeleted = list.filter((item) => item.pos !== i);\n        const normPosition = withoutDeleted.map((item, i) => {\n            item.pos = i;\n            return item;\n        });\n        setList(normPosition);\n    }\n    \n    return (\n      <ul className=\"list\">\n          {list !== undefined && list.map(({id, name}, i) => (               \n                <li key={`${id}${name}`} \n                    draggable={true}\n                    onDragStart = {(e) => handleDragStart(e)}\n                    onDragOver = {(e) => handleDragOver(e)}\n                    onDrop = {(e) => handleDrop(e)}\n                    onDragEnd = {(e) => handleDragEnd(e, i)}\n                    onChange = {(e) => handleChange(e, i)}\n                    className={`dragItem`}>\n                        <span>{name}</span>\n                        <button onClick = {() => deletePoint(i)}>x</button>\n                </li>       \n          ))}\n      </ul>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport nanoid from \"nanoid\";\n\nexport default function Details({ info, setInfo, center, list }) {\n        const [data, setData] = useState(\"\");\n\n        useEffect(() => {\n            if (!info.id) return;    \n        }, [info.id]);  \n\n        const onSubmit = (event) => {\n            event.preventDefault();\n            setInfo({id: nanoid(), name: data, coords: center, pos: list.length});\n            event.target.querySelector(\"input\").value = \"\";\n            setData(\"\");\n        }\n        \n        const onChangeInput = (event) => {\n            const {value} = event.target;\n            setData(value);\n        }\n     \n        return (\n            <form onSubmit={(event) => onSubmit(event)} className=\"catalog-search-form form-inline\">\n                <input type=\"text\" onChange={(event) => onChangeInput(event)} className=\"form-control\" placeholder=\"Новая точка маршрута\"/>\n            </form>\n        )\n}","import React, { useState, useEffect } from 'react';\nimport { YMaps, Map, Placemark, GeoObject } from \"react-yandex-maps\";\nimport './App.css';\nimport List from './components/List';\nimport Details from './components/Details';\n\nfunction App() {\n    const [info, setInfo] = useState({ id: null , name: null, coords: [], pos: null});\n    const [list, setList] = useState([]);\n    const [isListChange, setListChange] = useState(\"\");\n    const [ballonContent, setBallonContent] = useState(\"\");\n    const [hintContent, setHintContent] = useState(\"\");\n    const [center, setCenter] = useState([55.751574, 37.573856]);\n    \n    console.log(list, 'list')\n  \n    useEffect(() => {\n        if (!info.id) return;  \n            const isId = list.filter(item => item.id === info.id);\n        if (isId.length !== 0) {\n            const newList = list.map(item => item.id === info.id ? info : item);\n            setList(newList);\n        } else {\n            setList([...list, info]);\n        }        \n    }, [info.id, info.coords]);  \n\n// =========================================================================\n    const mapData = {\n        center: center,   \n        zoom: 5,\n    };\n\n    const placeMark = {\n        properties: {\n            hintContent: hintContent,\n            balloonContent: ballonContent,\n        }, \n\n        options: {\n            preset: 'islands#redCircleDotIconWithCaption',\n            draggable: true,\n        }\n    }  \n\n    const line = {\n        geometry: {\n            type: \"LineString\", \n            coordinates: (isListChange !== \"yes\") ? list.map(item => item.coords) : list.sort((a, b) => a.pos - b.pos).map(item => item.coords),\n        },\n        options: {\n            draggable: true,\n            strokeColor: '#0E4779',\n            strokeWidth: 4,\n        }\n    }\n// ===========================================================================\n    const getCenterMap = (event) => {\n        const newCenter = event.get('newCenter');\n        setCenter(newCenter);\n        console.log(center, 'center')\n    }\n\n    const changeCoords = (event, currentCoord) => {\n        const target = event.get('target');\n        const newCoords = target.geometry.getCoordinates();\n        const newList = list.filter(item => item.coords === currentCoord)\n        \n        setInfo({ id: newList[0].id , name: newList[0].name, coords: newCoords, pos: newList[0].pos});\n       \n        target.properties.set(newCoords);\n        newHintContent(newCoords);\n    }\n    \n    const onBallonClick = (content) => {\n        setBallonContent(content)\n    }\n\n    const newHintContent = (content) => {\n        setHintContent(content)\n    }\n\n    const baloonSet = (event) => {\n        event.get('target').options.set('preset', 'islands#greenIcon');\n    }\n\n    const baloonUnset = (event) => {\n        event.get('target').options.unset('preset');\n    }\n\n    return (\n      <div className=\"App\">\n        <YMaps>\n            <Details info={info} setInfo={setInfo} center={center} list={list}/>\n            <List list={list} setList={setList} setListChange={setListChange}/>\n            <div className=\"map\">\n                <Map modules={[\"geolocation\", \"geocode\"]} onBoundsChange={(event) => getCenterMap(event)} defaultState={mapData}>\n                  {list.map((item) => (\n                      <Placemark {...placeMark} \n                                onClick={() => onBallonClick(item.name)}\n                                onMouseEnter={() => newHintContent(item.coords)}\n                                onDragEnd={(event) => changeCoords(event, item.coords)} \n                                BalloonClose={(event) => baloonUnset(event)} \n                                BalloonOpen={(event) => baloonSet(event)}  \n                                modules={['geoObject.addon.balloon', 'geoObject.addon.hint']} \n                                geometry={item.coords} key={item.id}/>\n                  ))}\n                  {(list.length > 1 ) && <GeoObject {...line}></GeoObject>}\n                </Map>\n            </div>\n        </YMaps>\n      </div>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}